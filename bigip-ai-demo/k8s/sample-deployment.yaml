# =====================================================
# Namespace Definition
# =====================================================
apiVersion: v1
kind: Namespace
metadata:
  name: bigip-demo
---
# =====================================================
# Service Account for AI Agent
# =====================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ai-agent
  namespace: bigip-demo
---
# =====================================================
# Security Context Constraints for AI Agent (OpenShift SCC)
# =====================================================
apiVersion: security.openshift.io/v1
kind: SecurityContextConstraints
metadata:
  name: ai-agent-scc
allowPrivilegedContainer: false
allowHostDirVolumePlugin: false
allowHostIPC: false
allowHostNetwork: false
allowHostPID: false
allowHostPorts: false
allowPrivilegeEscalation: false
defaultAddCapabilities: []
fsGroup:
  type: MustRunAs
  ranges:
    - min: 1000900000
      max: 1000909999
readOnlyRootFilesystem: false
requiredDropCapabilities:
  - ALL
runAsUser:
  type: MustRunAs
  uid: 1000900000
seLinuxContext:
  type: MustRunAs
seccompProfiles:
  - runtime/default
supplementalGroups:
  type: RunAsAny
volumes:
  - configMap
  - downwardAPI
  - emptyDir
  - persistentVolumeClaim
  - projected
  - secret
users:
  - system:serviceaccount:bigip-demo:ai-agent
---
# =====================================================
# Deployment 1: AI Cluster (Usecase 1)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ai-cluster
  namespace: bigip-demo
  labels:
    app: ai-cluster
    usecase: "1"
spec:
  replicas: 3
  selector:
    matchLabels:
      app: ai-cluster
      usecase: "1"
  template:
    metadata:
      labels:
        app: ai-cluster
        usecase: "1"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: ai-cluster-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: ai-cluster-service
  namespace: bigip-demo
  labels:
    app: ai-cluster
    usecase: "1"
spec:
  selector:
    app: ai-cluster
    usecase: "1"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# =====================================================
# Deployment 2: East-West App (Usecase 2)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: eastwest-app
  namespace: bigip-demo
  labels:
    app: eastwest
    usecase: "2"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: eastwest
      usecase: "2"
  template:
    metadata:
      labels:
        app: eastwest
        usecase: "2"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: eastwest-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: eastwest-service
  namespace: bigip-demo
  labels:
    app: eastwest
    usecase: "2"
spec:
  selector:
    app: eastwest
    usecase: "2"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# =====================================================
# Deployment 3: Storage Service (Usecase 3)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage-service
  namespace: bigip-demo
  labels:
    app: storage-service
    usecase: "3"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: storage-service
      usecase: "3"
  template:
    metadata:
      labels:
        app: storage-service
        usecase: "3"
    spec:
      containers:
      - name: minio
        image: minio/minio:latest
        args:
          - "server"
          - "/data"
        env:
          - name: MINIO_ACCESS_KEY
            value: "minioaccess"
          - name: MINIO_SECRET_KEY
            value: "miniosecret"
        ports:
        - containerPort: 9000
        volumeMounts:
        - name: storage-data
          mountPath: /data
      volumes:
      - name: storage-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: storage-service
  namespace: bigip-demo
  labels:
    app: storage-service
    usecase: "3"
spec:
  selector:
    app: storage-service
    usecase: "3"
  ports:
  - name: http
    port: 9000
    targetPort: 9000
  type: ClusterIP
---
# =====================================================
# Deployment 4: Multi-Cluster Service (Usecase 4)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: multicluster-service
  namespace: bigip-demo
  labels:
    app: multicluster
    usecase: "4"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: multicluster
      usecase: "4"
  template:
    metadata:
      labels:
        app: multicluster
        usecase: "4"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: multicluster-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: multicluster-service
  namespace: bigip-demo
  labels:
    app: multicluster
    usecase: "4"
spec:
  selector:
    app: multicluster
    usecase: "4"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# =====================================================
# Deployment 5: Low Latency App (Usecase 5)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: lowlatency-app
  namespace: bigip-demo
  labels:
    app: lowlatency
    usecase: "5"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: lowlatency
      usecase: "5"
  template:
    metadata:
      labels:
        app: lowlatency
        usecase: "5"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: lowlatency-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: lowlatency-service
  namespace: bigip-demo
  labels:
    app: lowlatency
    usecase: "5"
spec:
  selector:
    app: lowlatency
    usecase: "5"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# =====================================================
# Deployment 6: API Gateway (Usecase 6)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: bigip-demo
  labels:
    app: api-gateway
    usecase: "6"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-gateway
      usecase: "6"
  template:
    metadata:
      labels:
        app: api-gateway
        usecase: "6"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: api-gateway-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway-service
  namespace: bigip-demo
  labels:
    app: api-gateway
    usecase: "6"
spec:
  selector:
    app: api-gateway
    usecase: "6"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# =====================================================
# Deployment 7: Fraud Detection (Usecase 7)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: fraud-detection
  namespace: bigip-demo
  labels:
    app: fraud-detection
    usecase: "7"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: fraud-detection
      usecase: "7"
  template:
    metadata:
      labels:
        app: fraud-detection
        usecase: "7"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: fraud-detection-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: fraud-detection-service
  namespace: bigip-demo
  labels:
    app: fraud-detection
    usecase: "7"
spec:
  selector:
    app: fraud-detection
    usecase: "7"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
# =====================================================
# Deployment 8: Traffic Monitor (Usecase 8)
# =====================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: traffic-monitor
  namespace: bigip-demo
  labels:
    app: traffic-monitor
    usecase: "8"
spec:
  replicas: 2
  selector:
    matchLabels:
      app: traffic-monitor
      usecase: "8"
  template:
    metadata:
      labels:
        app: traffic-monitor
        usecase: "8"
    spec:
      serviceAccountName: ai-agent
      containers:
      - name: traffic-monitor-container
        image: python:alpine
        command: ["python", "-m", "http.server", "8080"]
        ports:
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: traffic-monitor-service
  namespace: bigip-demo
  labels:
    app: traffic-monitor
    usecase: "8"
spec:
  selector:
    app: traffic-monitor
    usecase: "8"
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  type: ClusterIP